/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stateSolve;

/**
 *
 * @author T-Gamer
 */
public class CrosswordSolver {
    // contador de estados gerados
    public static int count = 0;
    public static ArrayList horizontalWords = new ArrayList(), verticalWords = new ArrayList(), words = new ArrayList();
    
    public static boolean solve(CrosswordState state) {
        count++;
        System.out.println(state);
        
        // obtém posição atual
        int r = state.getCurrentRow();
        int c = state.getCurrentColumn();

        if (r == 5) return true;
        if (state.get(r, c) == "#") {
//            System.out.println(state.get(r, c));
            state.setCurretnColumn(state.getCurrentColumn() + 1);
            solve(state);
        }
        if (state.get(r, c) == "a") {
            verifyWordDirection(state, r, c);
//            System.out.println(state.get(r, c));
            state.setCurretnColumn(state.getCurrentColumn() + 1);
            solve(state);
        }
        if (state.get(r, c) == "0") {
//            System.out.println(state.get(r, c));
            state.setCurrentRow(state.getCurrentRow() + 1);
            state.setCurretnColumn(0);
            solve(state);
        }
    
        /*if (state.get(r, c) == 4) { // saída encontrada
            System.out.println("EXIT FOUND!");
            return true;
        }
        
        // baseado no estado parcial atual, gera novos estados
        if (state.get(r - 1, c) == 0 || state.get(r - 1, c) == 4) {
            // existe caminho não explorado ao norte
            CrosswordState n = new CrosswordState(state); n.set(r, c, 3); n.setRow(r - 1);
            if (solve(n) == true) { return true; }
        }
        if (state.get(r + 1, c) == 0 || state.get(r + 1, c) == 4) {
            // existe caminho não explorado ao sul 
            CrosswordState s = new CrosswordState(state); s.set(r, c, 3); s.setRow(r + 1);
            if (solve(s) == true) { return true; }
        }
        if (state.get(r, c - 1) == 0 || state.get(r, c - 1) == 4) {
            // existe caminho não explorado a oeste
            CrosswordState o = new CrosswordState(state); o.set(r, c, 3); o.setCol(c - 1);
            if (solve(o) == true) { return true; }
        }
        if (state.get(r, c + 1) == 0 || state.get(r, c + 1) == 4) {
            // existe caminho não explorado a leste
            CrosswordState l = new CrosswordState(state); l.set(r, c, 3); l.setCol(c + 1);
            if (solve(l) == true) { return true; }
        }*/
        
        return false; // tudo mais falhou, retorne falso
    }

    public static CrosswordState verifyWordDirection(CrosswordState state, int r, int c){
        if(state.get(r, c + 1) == "a") return resolvHorizontalWord(state, r, c);
        if(state.get(r + 1, c) == "a") return resolvVerticalWord(state, r, c);
        return state;
    }
    public static CrosswordState resolvHorizontalWord(CrosswordState state, int r, int c){
        if(c != 0) return state;
        System.out.println("Horizontal");
        if(horizontalWords.isEmpty()){
            System.out.println("Linha: " + r + " Coluna: " + c);
            for(int i = 0; i < 5; i++){
                System.out.print(state.get(r, c + i));
            }
            System.out.print("\n");
            horizontalWords.add("A");
        }else{
            System.out.println("Linha: " + r + " Coluna: " + c);
            for(int i = 0; i < 5; i++){
                System.out.print(state.get(r, c + i));
            }
            System.out.print("\n");
        }
        return  state;
    }
    public static CrosswordState resolvVerticalWord(CrosswordState state, int r, int c){
        if(r != 0) return state;
        System.out.println("Vertical");
        if(verticalWords.isEmpty()){
            System.out.println("Linha: " + r + " Coluna: " + c);
            for(int i = 0; i < 5; i++){
                System.out.println(state.get(r + i, c));
            }
            System.out.print("\n");
            verticalWords.add("A");
        }else{
            System.out.println("Linha: " + r + " Coluna: " + c);
            for(int i = 0; i < 5; i++){
                System.out.println(state.get(r + i, c));
            }
            System.out.print("\n");
        }
        return state;
    }
    
    public static void main(String[] args) {
        long start = System.currentTimeMillis();
        CrosswordState first = new CrosswordState();

        SimpleReader file = new SimpleReader("C:\\Users\\Martin\\IdeaProjects\\Estrutura de Dados 2\\Projeto 2\\src\\src\\palavras-5.txt");
        file.createWordMap();
        words = file.getWordsMap();
//        System.out.println(words);
        
        solve(first);
        
        System.out.println("count: " + count);
        System.out.println("time : " + ( System.currentTimeMillis() - start ) / 1000.0 + " s");
    }
}
